<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
	http://www.springframework.org/schema/tx  
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- 导入属性配置文件 -->
	<context:property-placeholder location="classpath*:*.properties" />
	<!-- 配置数据源 -->
    <bean id="abstractDataSource" abstract="true"
		class="org.apache.tomcat.jdbc.pool.DataSource"
		destroy-method="close">
		<property name="driverClassName" value="${spring.datasource.driverClassName}" />
		<property name="username" value="${spring.datasource.username}" />
		<property name="password" value="${spring.datasource.password}" />
	</bean>

	<bean id="readDS" parent="abstractDataSource">
		<property name="url" value="${data.readUrl}" />
	</bean>
	
	<bean id="writeDS" parent="abstractDataSource">
		<property name="url" value="${data.writeUrl}" />
	</bean>
	
	<!--简单的一个master和一个slaver 读写分离的数据源 -->
	<bean id="routingDataSourceProxy" 
	    class="org.spring.boot.mybatis.rw.starter.datasource.impl.RoundRobinRWRoutingDataSourceProxy">
	    <property name="writeDataSource" ref="writeDS"/>
	    <property name="readDataSoures">
	        <list>
	            <ref bean="readDS"/>
	            <ref bean="readDS"/>
	            <ref bean="readDS"/>
	        </list>
	    </property>
	</bean>
	<bean id="dataSource" class="org.spring.boot.mybatis.rw.starter.datasource.LazyConnectionDataSourceProxy">
		 <constructor-arg ref="routingDataSourceProxy" /> 
	</bean>
	<!--自定义事务工厂  -->
	<bean id="transactionFactory" class="org.spring.boot.mybatis.rw.starter.transaction.RWManagedTransactionFactory"></bean>
	<!-- mybatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionFactory" ref="transactionFactory"/>
		<property name="configLocation" value="classpath:mybatis-plugin-config.xml" />
		<!-- mapper和resultmap配置路径 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:org.spring.boot.mybatis.rw.sample.mapper/**/*Mapper.xml
				</value>
			</list>
		</property> 
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"> 
      <constructor-arg ref="sqlSessionFactory" />
    </bean>
	<!-- 通过扫描的模式，扫描目录下所有的mapper， 根据对应的mapper.xml为其生成代理类-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.spring.boot.mybatis.rw.sample.mapper" />
	</bean>

</beans>
