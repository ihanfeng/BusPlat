// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.0
//
// <auto-generated>
//
// Generated from file `hello.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.xxx.demo.demo;

public class Order implements java.lang.Cloneable, java.io.Serializable
{
    public long orderId;

    public String phone;

    public String orderNum;

    public int orderDate;

    public int ticketType;

    public double amount;

    public int orderStatus;

    public Order()
    {
        phone = "";
        orderNum = "";
    }

    public Order(long orderId, String phone, String orderNum, int orderDate, int ticketType, double amount, int orderStatus)
    {
        this.orderId = orderId;
        this.phone = phone;
        this.orderNum = orderNum;
        this.orderDate = orderDate;
        this.ticketType = ticketType;
        this.amount = amount;
        this.orderStatus = orderStatus;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Order _r = null;
        if(rhs instanceof Order)
        {
            _r = (Order)rhs;
        }

        if(_r != null)
        {
            if(orderId != _r.orderId)
            {
                return false;
            }
            if(phone != _r.phone)
            {
                if(phone == null || _r.phone == null || !phone.equals(_r.phone))
                {
                    return false;
                }
            }
            if(orderNum != _r.orderNum)
            {
                if(orderNum == null || _r.orderNum == null || !orderNum.equals(_r.orderNum))
                {
                    return false;
                }
            }
            if(orderDate != _r.orderDate)
            {
                return false;
            }
            if(ticketType != _r.ticketType)
            {
                return false;
            }
            if(amount != _r.amount)
            {
                return false;
            }
            if(orderStatus != _r.orderStatus)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::demo::Order");
        __h = IceInternal.HashUtil.hashAdd(__h, orderId);
        __h = IceInternal.HashUtil.hashAdd(__h, phone);
        __h = IceInternal.HashUtil.hashAdd(__h, orderNum);
        __h = IceInternal.HashUtil.hashAdd(__h, orderDate);
        __h = IceInternal.HashUtil.hashAdd(__h, ticketType);
        __h = IceInternal.HashUtil.hashAdd(__h, amount);
        __h = IceInternal.HashUtil.hashAdd(__h, orderStatus);
        return __h;
    }

    public Order
    clone()
    {
        Order c = null;
        try
        {
            c = (Order)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeLong(orderId);
        __os.writeString(phone);
        __os.writeString(orderNum);
        __os.writeInt(orderDate);
        __os.writeInt(ticketType);
        __os.writeDouble(amount);
        __os.writeInt(orderStatus);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        orderId = __is.readLong();
        phone = __is.readString();
        orderNum = __is.readString();
        orderDate = __is.readInt();
        ticketType = __is.readInt();
        amount = __is.readDouble();
        orderStatus = __is.readInt();
    }

    static public void
    __write(IceInternal.BasicStream __os, Order __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public Order
    __read(IceInternal.BasicStream __is, Order __v)
    {
        if(__v == null)
        {
             __v = new Order();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final Order __nullMarshalValue = new Order();

    public static final long serialVersionUID = -634673034L;
}
